package main

import (
	"fmt"
	"log"
	"math/rand"
	"os"
	"os/signal"
	"strings"
	"sync"
	"syscall"
	"time"

	"github.com/spf13/cobra"
	"github.com/yourusername/trivia-api/bottest/pkg/bot"
)

var (
	// –ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	baseURL string = "http://localhost:8080"
	// JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
	token string
	// ID –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã (–¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π)
	quizID uint
	// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ—Ç–æ–≤
	botCount int = 1
	// –°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Ç–≤–µ—Ç–æ–≤
	answerStrategy string = "random"
	// –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
	minDelayMs int = 1000
	// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
	maxDelayMs int = 5000
	// –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π correct/incorrect)
	correctAnswerRate int = 50
	// ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
	startUserID uint = 1000
	// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
	createQuiz bool
)

func main() {
	// –ö–æ—Ä–Ω–µ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
	rootCmd := &cobra.Command{
		Use:   "bottest",
		Short: "–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã",
		Long:  "–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ API –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.",
	}

	// –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–æ–≤
	runCmd := &cobra.Command{
		Use:   "run",
		Short: "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã",
		Run:   runBots,
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	runCmd.Flags().StringVar(&baseURL, "url", baseURL, "–ë–∞–∑–æ–≤—ã–π URL API (–Ω–∞–ø—Ä–∏–º–µ—Ä, http://localhost:8080)")
	runCmd.Flags().StringVar(&token, "token", "", "JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
	runCmd.Flags().UintVar(&quizID, "quiz", 0, "ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
	runCmd.Flags().IntVar(&botCount, "bots", botCount, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
	runCmd.Flags().StringVar(&answerStrategy, "strategy", answerStrategy, "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Ç–≤–µ—Ç–æ–≤: random, fast, slow, correct, incorrect")
	runCmd.Flags().IntVar(&minDelayMs, "min-delay", minDelayMs, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º (–º—Å)")
	runCmd.Flags().IntVar(&maxDelayMs, "max-delay", maxDelayMs, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º (–º—Å)")
	runCmd.Flags().IntVar(&correctAnswerRate, "correct-rate", correctAnswerRate, "–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (0-100)")
	runCmd.Flags().UintVar(&startUserID, "start-uid", startUserID, "–ù–∞—á–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	runCmd.Flags().BoolVar(&createQuiz, "create", false, "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
	runCmd.MarkFlagRequired("token")

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∫–æ–º–∞–Ω–¥—ã –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ
	rootCmd.AddCommand(runCmd)

	// –ó–∞–ø—É—Å–∫–∞–µ–º
	if err := rootCmd.Execute(); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}

// runBots –∑–∞–ø—É—Å–∫–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ—Ç–æ–≤
func runBots(cmd *cobra.Command, args []string) {
	// –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
	if token == "" {
		log.Fatal("–¢—Ä–µ–±—É–µ—Ç—Å—è JWT —Ç–æ–∫–µ–Ω (--token)")
	}

	if quizID == 0 && !createQuiz {
		log.Fatal("–¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å ID –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã (--quiz) –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é (--create)")
	}

	if !isValidStrategy(answerStrategy) {
		log.Fatal("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Ç–≤–µ—Ç–æ–≤. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: random, fast, slow, correct, incorrect")
	}

	if minDelayMs < 0 {
		log.Fatal("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")
	}

	if maxDelayMs < minDelayMs {
		log.Fatal("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π")
	}

	if correctAnswerRate < 0 || correctAnswerRate > 100 {
		log.Fatal("–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-100")
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º rand —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
	rand.Seed(time.Now().UnixNano())

	log.Printf("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã")
	log.Printf("üì° –°–µ—Ä–≤–µ—Ä: %s", baseURL)
	log.Printf("ü§ñ –ë–æ—Ç–æ–≤: %d", botCount)
	log.Printf("‚öôÔ∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è: %s", answerStrategy)
	log.Printf("‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞: %d-%d –º—Å", minDelayMs, maxDelayMs)

	// –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, –¥–µ–ª–∞–µ–º —ç—Ç–æ
	var createdQuizID uint
	if createQuiz {
		log.Printf("üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã...")
		var err error
		createdQuizID, err = createNewQuiz()
		if err != nil {
			log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: %v", err)
		}
		quizID = createdQuizID
		log.Printf("‚úÖ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ #%d —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –û–∂–∏–¥–∞–µ–º –Ω–∞—á–∞–ª–∞...", quizID)
	}

	// –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤
	var wg sync.WaitGroup
	bots := make([]*bot.Bot, botCount)

	for i := 0; i < botCount; i++ {
		// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞
		config := &bot.BotConfig{
			AnswerStrategy:    answerStrategy,
			MinDelay:          time.Duration(minDelayMs) * time.Millisecond,
			MaxDelay:          time.Duration(maxDelayMs) * time.Millisecond,
			CorrectAnswerRate: correctAnswerRate,
		}

		// –ö–∞–∂–¥–æ–º—É –±–æ—Ç—É –Ω–∞–∑–Ω–∞—á–∞–µ–º —Å–≤–æ–π userID
		userID := startUserID + uint(i)

		// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
		b := bot.NewBot(baseURL, token, userID, i+1, config)
		bots[i] = b

		// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
		wg.Add(1)
		go func(b *bot.Bot) {
			defer wg.Done()
			var err error
			if createQuiz && i == 0 && createdQuizID > 0 {
				// –ü–µ—Ä–≤—ã–π –±–æ—Ç —É–∂–µ —Å–æ–∑–¥–∞–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–∞—é—Ç—Å—è
				log.Printf("[%s] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ #%d, —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø–µ—Ä–≤—ã–º –±–æ—Ç–æ–º", b.Name, createdQuizID)
				err = b.JoinQuiz(createdQuizID)
			} else if createQuiz && i == 0 {
				// –ü–µ—Ä–≤—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
				log.Printf("[%s] –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", b.Name)
				err = b.CreateAndJoinQuiz()
			} else {
				// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ
				log.Printf("[%s] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ #%d", b.Name, quizID)
				err = b.JoinQuiz(quizID)
			}

			if err != nil {
				log.Printf("[%s] ‚ùå –û—à–∏–±–∫–∞: %v", b.Name, err)
			}
		}(b)
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	go func() {
		<-sigChan
		log.Println("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
		for _, b := range bots {
			if b != nil && b.Client != nil {
				b.Client.Close()
			}
		}
		// –ñ–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –∏ –≤—ã—Ö–æ–¥–∏–º
		time.Sleep(1 * time.Second)
		os.Exit(0)
	}()

	log.Printf("üìä –ë–æ—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
	wg.Wait()
}

// createNewQuiz —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–µ ID
func createNewQuiz() (uint, error) {
	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –±–æ—Ç–∞-—Å–æ–∑–¥–∞—Ç–µ–ª—è
	config := &bot.BotConfig{
		AnswerStrategy:    "random",
		MinDelay:          time.Duration(minDelayMs) * time.Millisecond,
		MaxDelay:          time.Duration(maxDelayMs) * time.Millisecond,
		CorrectAnswerRate: correctAnswerRate,
	}

	// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å ID 999 –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
	creatorBot := bot.NewBot(baseURL, token, startUserID, 999, config)

	// –°–æ–∑–¥–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è
	startTime := time.Now().Add(1 * time.Minute)

	// –°–æ–∑–¥–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
	quiz, err := creatorBot.Client.CreateQuiz(
		"–¢–µ—Å—Ç–æ–≤–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞",
		"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–≤",
		startTime,
	)
	if err != nil {
		return 0, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: %w", err)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
	questions := []struct {
		Text          string
		Options       []string
		CorrectOption int
		TimeLimitSec  int
		PointValue    int
	}{
		{
			Text:          "–ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤ Google –¥–ª—è –∑–∞–º–µ–Ω—ã C++?",
			Options:       []string{"Java", "Go", "Rust", "Swift", "Kotlin"},
			CorrectOption: 1, // Go
			TimeLimitSec:  15,
			PointValue:    10,
		},
		{
			Text:          "–ö–∞–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É LIFO?",
			Options:       []string{"–û—á–µ—Ä–µ–¥—å", "–°—Ç–µ–∫", "–°–ø–∏—Å–æ–∫", "–î–µ—Ä–µ–≤–æ", "–ì—Ä–∞—Ñ"},
			CorrectOption: 1, // –°—Ç–µ–∫
			TimeLimitSec:  10,
			PointValue:    15,
		},
		{
			Text:          "–ß—Ç–æ —Ç–∞–∫–æ–µ –≥–æ—Ä—É—Ç–∏–Ω—ã –≤ Go?",
			Options:       []string{"–§—É–Ω–∫—Ü–∏–∏", "–õ–µ–≥–∫–æ–≤–µ—Å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏", "–ö–∞–Ω–∞–ª—ã", "–°—Ç—Ä—É–∫—Ç—É—Ä—ã", "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã"},
			CorrectOption: 1, // –õ–µ–≥–∫–æ–≤–µ—Å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
			TimeLimitSec:  20,
			PointValue:    20,
		},
		{
			Text:          "–ö–∞–∫–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü?",
			Options:       []string{"FTP", "SMTP", "HTTP", "SSH", "DNS"},
			CorrectOption: 2, // HTTP
			TimeLimitSec:  10,
			PointValue:    5,
		},
		{
			Text:          "–ß—Ç–æ —Ç–∞–∫–æ–µ WebSocket?",
			Options:       []string{"–ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–π —Å–≤—è–∑–∏", "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ JavaScript", "–ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ–π —Å–≤—è–∑–∏", "–í–µ–±-—Å–µ—Ä–≤–µ—Ä", "–§—Ä–µ–π–º–≤–æ—Ä–∫"},
			CorrectOption: 2, // –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ–π —Å–≤—è–∑–∏
			TimeLimitSec:  15,
			PointValue:    15,
		},
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
	apiQuestions := make([]struct {
		Text          string   `json:"text"`
		Options       []string `json:"options"`
		CorrectOption int      `json:"correct_option"`
		TimeLimitSec  int      `json:"time_limit_sec"`
		PointValue    int      `json:"point_value"`
	}, len(questions))

	for i, q := range questions {
		apiQuestions[i].Text = q.Text
		apiQuestions[i].Options = q.Options
		apiQuestions[i].CorrectOption = q.CorrectOption
		apiQuestions[i].TimeLimitSec = q.TimeLimitSec
		apiQuestions[i].PointValue = q.PointValue
	}

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±–æ—Ç–∞-—Å–æ–∑–¥–∞—Ç–µ–ª—è
	creatorBot.Client.Close()

	return quiz.ID, nil
}

// isValidStrategy –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–æ–ø—É—Å—Ç–∏–º–æ–π
func isValidStrategy(strategy string) bool {
	validStrategies := []string{"random", "fast", "slow", "correct", "incorrect"}
	strategy = strings.ToLower(strategy)

	for _, valid := range validStrategies {
		if strategy == valid {
			return true
		}
	}

	return false
}
